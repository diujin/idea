{
  "Asset": {
    "type": {
      "kind": "property",
      "list": false,
      "type":[ "text/html", "text/javascript", "text/css", "text/plain" ],
      "description": "The MIME type of the build file asset"
    }, 
    "content": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The source code of the build file asset."
    }
  },
  "Path": { 
    "path": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The file path",
      "example": "'/path/to/file'"
    }, 
    "type": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The type of path.",
      "example": "'file'"
    }
  },
  "Config": {
    "brand": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The brand prefixed before the component tag name.",
      "example": "'ink'"
    },
    "cwd": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The project's current working directory (cwd).",
      "example": "'/path/to/project'"
    },
    "fs": {
      "kind": "property",
      "list": false,
      "type": "FileSystem",
      "description": "The file system being used to read/write files.",
      "example": "import fs from 'fs';\n\nfs"
    },
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "import EventEmitter from 'events';\n\nnew EventEmitter();"
    },
    "name?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Custom name of component."
    },
    "type?": {
      "kind": "property",
      "list": false,
      "type": ["document", "component", "template"],
      "description": "Type of component"
    },
    "minify?": {
      "kind": "property",
      "list": false,
      "type": "boolean",
      "description": "Whether to minify the generated JavaScript code."
    },
    "tsconfig?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The location of the used tsconfig.json.",
      "example": "'/path/to/tsconfig.json'"
    },
    "extname?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The component file extension.",
      "example": "'.ink'"
    }
  },
  "Import": {
    "typeOnly": {
      "kind": "property",
      "list": false,
      "type": "boolean",
      "description": "Should import as type only.",
      "example": "import type { Foo } from 'bar';"
    },
    "names?": {
      "kind": "property",
      "list": true,
      "type": "string",
      "description": "All the names imported",
      "example": "import { Foo, Bar } from 'foobar';"
    },
    "default": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The default import name",
      "example": "import foo from 'bar';"
    },
    "source":{
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The file path where names are imported from.",
      "example": "import * from 'foobar';"
    }
  },
  "Build": {
    "source": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the generated JavaScript source code.",
      "example": "compiler.import('./docs/api.ink').source; //server js code"
    },
    "InkDocument": {
      "kind": "property",
      "list": false,
      "type": "ServerDocumentClass",
      "description": "Returns a server document class that can be instantiated.",
      "example": "new (compiler.import('./docs/api.ink').InkDocument);"
    },
    "document": {
      "kind": "property",
      "list": false,
      "type": "ServerDocument",
      "description": "Returns the default instantiated document used to render the final HTML markup.",
      "example": "compiler.import('./docs/api.ink').document.render(); //<html>...</html>"
    }
  },
  "CacheOptions": {
    "buildPath": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The absolute path the build directory",
      "example": "'/path/to/build'"
    },
    "manifestFile?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The name of the manifest file.",
      "example": "'manifest.json'"
    },
    "environment?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The environment mode that will determine the cache strategy.",
      "example": "'production' | 'development'"
    }
  },
  "Component": {
    "ast": {
      "kind": "property",
      "list": false,
      "type": "AST",
      "description": "Returns an abstract syntax tree (AST) interpretation of the component.",
      "example": "component.ast.markup;"
    },
    "brand": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the brand prefixed before the component tag name.",
      "example": "component.brand; //--> 'ink'"
    },
    "classname": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the suggested class name of the component.",
      "example": "component.classname; //--> 'Button_abc123'"
    },
    "components":{
      "kind": "property",
      "list": true,
      "type": "Component",
      "description": "Returns a list of child components imported by this component.",
      "example": "component.components[0].brand; //--> 'ink'"
    },
    "contents": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the raw ink source code.",
      "example": "component.contents;"
    },
    "cwd": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the project's current working directory (cwd).",
      "example": "component.cwd; //--> '/path/to/project'"
    },
    "dependencies": {
      "kind": "property",
      "list": true,
      "type": "{ path: string, type: string }",
      "description": "Returns all the files this component imports sorted by type.",
      "example": "component.dependencies; //--> [{ type: 'file', path: './random/file' }, ...]"
    },
    "dirname": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the directory name where this component file exists.",
      "example": "component.dirname;"
    },
    "fs": {
      "kind": "property",
      "list": false,
      "type": "FileSystem",
      "description": "Returns the file system being used to read/write files.",
      "example": "component.fs;"
    },
    "id":{
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns a unique component ID used for build files.",
      "example": "component.id;"
    },
    "imports": {
      "kind": "property",
      "list": true,
      "type": "Import",
      "description": "Returns the files imported by this component. This does not include any component files.",
      "example": "component.imports;"
    },
    "markup": {
      "kind": "property",
      "list": true,
      "type": "Token",
      "description": "Returns the markup abstract syntax tree.",
      "example": "component.markup;"
    },
    "loader": {
      "kind": "property",
      "list": false,
      "type": "FileLoader",
      "description": "Returns the file loader used to resolve paths of imported files.",
      "example": "component.loader.absolute('./path/to/some/file');"
    },
    "parent": {
      "kind": "property",
      "list": false,
      "type": "Component|null",
      "description": "Returns the parent component, if any.",
      "example": "component.parent;"
    },
    "registry": {
      "kind": "property",
      "list": false,
      "type": "Record<string, Component>",
      "description": "Returns all child components and sub-child components.",
      "example": "component.registry;"
    },
    "relative": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the source file path relative to the current working directory (cwd).",
      "example": "component.contents;"
    },
    "source": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the source file path. This may or may not be the absolute path.",
      "example": "component.source;"
    },
    "scripts": {
      "kind": "property",
      "list": true,
      "type": "string",
      "description": "Returns all the collective JavaScript in the ink source file.",
      "example": "component.scripts;"
    },
    "styles": {
      "kind": "property",
      "list": true,
      "type": "string",
      "description": "Returns all the collective CSS styles in the ink source file.",
      "example": "component.styles;"
    },
    "tagname": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the suggested HTML tag name.",
      "example": "component.tagname;"
    },
    "type": {
      "kind": "property",
      "list": false,
      "type": ["document", "component", "template"],
      "description": "Returns type of component. Will transpile depending on the type.",
      "example": "component.type;"
    }
  },
  "EventEmitter": {
    "render": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }, 
        "props": {
          "kind": "property",
          "list": false,
          "type": "Hash"
        } 
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before the document is rendered.",
      "example": "compiler.emitter.on('render', e => {\n  const { builder, build, props } = e.params;\n  //...\n  e.data = 'new html...';\n});"
    },
    "rendered": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }, 
        "props": {
          "kind": "property",
          "list": false,
          "type": "Hash"
        } , 
        "html": {
          "kind": "property",
          "list": false,
          "type": "string"
        } 
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers after the document is rendered.",
      "example": "compiler.emitter.on('rendered', e => {\n  const { builder, build, props, html } = e.params;\n  //...\n  e.data = 'new html...';\n});"
    },
    "build": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before the document is built.",
      "example": "compiler.emitter.on('build', e => {\n  const { builder } = e.params;\n  //...\n  e.data = 'new ink source...';\n});"
    },
    "built": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "Build"
      },
      "description": "Triggers after the document is built.",
      "example": "compiler.emitter.on('built', e => {\n  const { builder, build } = e.params;\n  //...\n  e.data = { ...build };\n});"
    },
    "build-client": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before the client js is rendered.",
      "example": "compiler.emitter.on('build-client', e => {\n  const { builder } = e.params;\n  //...\n  e.data = 'new ink source...';\n});"
    },
    "built-client": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers after the client js is rendered.",
      "example": "compiler.emitter.on('built-client', e => {\n  const { builder, build } = e.params;\n  //...\n  e.data = 'new client js...';\n});"
    },
    "build-markup": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before markup is rendered.",
      "example": "compiler.emitter.on('build-markup', e => {\n  const { builder } = e.params;\n  //...\n  e.data = 'new ink source...';\n});"
    },
    "built-markup": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers after markup is rendered.",
      "example": "compiler.emitter.on('built-markup', e => {\n  const { builder, build } = e.params;\n  //...\n  e.data = 'new markup...';\n});"
    },
    "build-server": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before the server js is rendered.",
      "example": "compiler.emitter.on('build-server', e => {\n  const { builder } = e.params;\n  //...\n  e.data = 'new ink source...';\n});"
    },
    "built-server": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers after the server js is rendered.",
      "example": "compiler.emitter.on('built-server', e => {\n  const { builder, build } = e.params;\n  //...\n  e.data = 'new server js...';\n});"
    },
    "build-styles": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        } 
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers before the css styles are rendered.",
      "example": "compiler.emitter.on('build-styles', e => {\n  const { builder } = e.params;\n  //...\n  e.data = 'new ink source...';\n});"
    },
    "built-styles": {
      "kind": "event",
      "params": { 
        "builder": {
          "kind": "property",
          "list": false,
          "type": "DocumentBuilder"
        }, 
        "build": {
          "kind": "property",
          "list": false,
          "type": "Build"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Triggers after the css styles is rendered.",
      "example": "compiler.emitter.on('built-styles', e => {\n  const { builder, build } = e.params;\n  //...\n  e.data = 'new css...';\n});"
    },
    "manifest-load": {
      "kind": "event",
      "params": { 
        "manifest": {
          "kind": "property",
          "list": false,
          "type": "DocumentManifest"
        }, 
        "map": {
          "kind": "property",
          "list": false,
          "type": "Map<string, string>"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "Map<string, string>"
      },
      "description": "Triggers before the manifest is loaded.",
      "example": "compiler.emitter.on('manifest-load', e => {\n  const { manifest, map } = e.params;\n  //...\n  e.data = new Map<string, string>();\n});"
    },
    "manifest-resolve": {
      "kind": "event",
      "params": { 
        "manifest": {
          "kind": "property",
          "list": false,
          "type": "DocumentManifest"
        }, 
        "id": {
          "kind": "property",
          "list": false,
          "type": "string"
        }
      },
      "description": "Triggers before a build ID is resolved.",
      "example": "compiler.emitter.on('manifest-resolve', e => {\n  const { manifest, id } = e.params;\n  //...\n});"
    },
    "manifest-resolved": {
      "kind": "event",
      "params": { 
        "manifest": {
          "kind": "property",
          "list": false,
          "type": "DocumentManifest"
        }, 
        "id": {
          "kind": "property",
          "list": false,
          "type": "string"
        },
        "path": {
          "kind": "property",
          "list": false,
          "type": "string"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "Map<string, string>"
      },
      "description": "Triggers after a build ID/entry is set.",
      "example": "compiler.emitter.on('manifest-resolved', e => {\n  const { manifest, id, path } = e.params;\n  //...\n});"
    },
    "manifest-unresolved": {
      "kind": "event",
      "params": { 
        "manifest": {
          "kind": "property",
          "list": false,
          "type": "DocumentManifest"
        }, 
        "id": {
          "kind": "property",
          "list": false,
          "type": "string"
        },
        "path": {
          "kind": "property",
          "list": false,
          "type": "string|undefined"
        }
      },
      "data": {
        "kind": "property",
        "list": false,
        "type": "Map<string, string>"
      },
      "description": "Triggers after a build ID is deleted.",
      "example": "compiler.emitter.on('manifest-unresolved', e => {\n  const { manifest, id, path } = e.params;\n  //...\n});"
    }
  },
  "DocumentManifest": {
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "compiler.manifest.emitter.on('render', e => {\n  console.log(e.params);\n});"
    },
    "registry": {
      "kind": "property",
      "list": false,
      "type": "Map<string, string>",
      "description": "The manifest registry used to map build IDs to document entry files.",
      "example": "compiler.manifest.registry.entries();"
    },
    "builder": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "id",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentBuilder"
      },
      "description": "Returns a document builder given the build id.",
      "example": "compiler.manifest.builder('abc123');"
    },
    "delete": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "id",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentManifest"
      },
      "description": "Removes an entry file from the manifest given the build id.",
      "example": "compiler.manifest.delete('abc123');"
    },
    "entries": {
      "kind": "function",
      "async": false,
      "args": [],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "[ string, string ]"
      },
      "description": "Returns an array of build IDs and entry file paths.",
      "example": "compiler.manifest.entries();"
    },
    "get": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "name": "id",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the entry file path given the build id.",
      "example": "compiler.manifest.get('abc123');"
    },
    "has": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "name": "id",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "boolean"
      },
      "description": "Returns true if the build id exists in the manifest.",
      "example": "compiler.manifest.has('abc123');"
    },
    "load": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "name": "manifest",
          "type": "Record<string, string>"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentManifest"
      },
      "description": "Loads an entire manifest object to the registry.",
      "example": "compiler.manifest.load({ abc123: '/path/to/entry.ink' });"
    },
    "keys": {
      "kind": "function",
      "async": false,
      "args": [],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "string"
      },
      "description": "Returns an array of build IDs.",
      "example": "compiler.manifest.keys();"
    },
    "set": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "name": "id",
          "type": "string"
        },
        {
          "kind": "property",
          "name": "path",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentManifest"
      },
      "description": "Sets an entry file path to the manifest given the build id.",
      "example": "compiler.manifest.set('abc123', '/path/to/entry.ink');"
    },
    "toJson": {
      "kind": "function",
      "async": false,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the manifest as a JSON string.",
      "example": "compiler.manifest.toJson();"
    },
    "values": {
      "kind": "function",
      "async": false,
      "args": [],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "string"
      },
      "description": "Returns an array of entry file paths.",
      "example": "compiler.manifest.values();"
    }
  },
  "DocumentTranspiler": {
    "directive": {
      "kind": "function",
      "async": false,
      "args": [
        {
          "kind": "property",
          "name": "directive",
          "type": "DirectiveInterface"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentTranspiler"
      },
      "description": "Adds a directive that transpiles custom markup tags like if/elif/else, each, try/catch.",
      "example": "compiler.fromSource('./docs/api.ink').transpiler.directive(CustomDirective);"
    },
    "transpile": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "SourceFile"
      }
    },
    "description": "Converts a ink file to server-side JavaScript.",
    "example": "compiler.fromSource('./docs/api.ink').transpiler.transpile();"
  },
  "DocumentBuilder": {
    "document": {
      "kind": "property",
      "list": false,
      "type": "Component",
      "description": "Returns a document component with various meta information, used for transpilation.",
      "example": "compiler.fromSource('./docs/api.ink').document.classname; //--> 'Index_abc123'"
    },
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "compiler.fromSource('./docs/api.ink').emitter.on('render', e => {\n  console.log(e.params);\n});"
    },
    "extnames": {
      "kind": "property",
      "list": true,
      "type": "string",
      "description": "Returns the file extensions that are recognized to parse as Ink components.",
      "example": "compiler.fromSource('./docs/api.ink').extnames; //--> [ 'ink' ]"
    },
    "transpiler": {
      "kind": "property",
      "list": false,
      "type": "DocumentTranspiler",
      "description": "Returns a transpiler used to convert a ink file to server-side JavaScript.",
      "example": "compiler.fromSource('./docs/api.ink').transpiler.transpile();"
    },
    "tsconfig":  {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "Returns the location of the used tsconfig.json.",
      "example": "compiler.fromSource('./docs/api.ink').tsconfig; //--> /path/to/tsconfig.json"
    },
    "build": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Build"
      },
      "description": "Generates the server-side component and brings it into the runtime.",
      "example": "compiler.fromSource('./docs/api.ink').build();"
    },
    "client": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Generates the browser-side JavaScript.",
      "example": "compiler.fromSource('./docs/api.ink').client(); //client js code"
    },
    "component": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Generates the source file as an independent component.",
      "example": "compiler.fromSource('./docs/my-button.ink').component(); //component js code"
    },
    "markup": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Generates the html markup.",
      "example": "compiler.fromSource('./docs/api.ink').markup(); //<html>...</html>"
    },
    "server": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Generates the server-side JavaScript.",
      "example": "compiler.fromSource('./docs/api.ink').markup(); //server js code"
    },
    "styles": {
      "kind": "function",
      "async": true,
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Generates the css styles.",
      "example": "compiler.fromSource('./docs/api.ink').styles(); //css code"
    }
  },
  "ServerDocumentClass": {
    "component": {
      "kind": "property",
      "list": false,
      "type": "[ string, string ]",
      "description": "Returns the component tag name and class name.",
      "example": "compiler.import('./docs/api.ink').InkDocument.component; //--> [ 'tui-button', 'TuiButton_abc123' ]"
    },
    "new": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "ServerDocument"
      },
      "description": "Instantiates the server document class on the server-side used to render the final HTML.",
      "example": "new (compiler.import('./docs/api.ink').InkDocument);"
    }
  },
  "ServerDocument": {
    "id": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns a unique document ID used to map the build cache.",
      "example": "compiler.import('./docs/api.ink').document.id(); //--> 'abc123'"
    },
    "styles": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the css styles for this document.",
      "example": "compiler.import('./docs/api.ink').document.styles(); //css styles"
    },
    "template": {
      "template": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "Element"
      },
      "description": "Returns an array of Element children and sub-children.",
      "example": "compiler.import('./docs/api.ink').document.template();"
    },
    "render": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "name": "props",
          "type": "Record<string, any>"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the final document HTML markup.",
      "example": "compiler.import('./docs/api.ink').document.render();"
    }
  },
  "InkOptions": {
    "brand?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The brand prefixed before the component tag name.",
      "example": "const compiler = ink({ brand: 'ink' });"
    },
    "cwd?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The project's current working directory (cwd).",
      "example": "const compiler = ink({ cwd: '/path/to/project' });'"
    },
    "fs?": {
      "kind": "property",
      "list": false,
      "type": "FileSystem",
      "description": "The file system being used to read/write files.",
      "example": "import fs from 'fs';\n\nconst compiler = ink({ fs });'"
    },
    "emitter?": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "import emitter from 'events';\n\nconst compiler = ink({ emitter });'"
    },
    "minify?": {
      "kind": "property",
      "list": false,
      "type": "boolean",
      "description": "Whether to minify the generated JavaScript code.",
      "example": "const compiler = ink({ minify: true });'"
    },
    "tsconfig?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The location of the used tsconfig.json.",
      "example": "const compiler = ink({ tsconfig: '/path/to/tsconfig.json' });'"
    },
    "extname?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The component file extension.",
      "example": "const compiler = ink({ extname: '.ink' });'"
    }
  },
  "InkCompiler": {
    "config": {
      "kind": "property",
      "list": false,
      "type": "Config",
      "description": "The Ink configuration",
      "example": "compiler.config.brand; //--> 'ink'"
    },
    "fs": {
      "kind": "property",
      "list": false,
      "type": "FileSystem",
      "description": "The file system being used.",
      "example": "compiler.fs.readFileSync('some/file', 'utf8');"
    },
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "compiler.emitter.on('render', e => {\n  console.log(e.params);\n});"
    },
    "manifest": {
      "kind": "property",
      "list": false,
      "type": "DocumentManifest",
      "description": "The manifest registry used to map build IDs to document entry files.",
      "example": "compiler.manifest.entries();"
    },
    "component": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Component"
      }
    },
    "fromId": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "id",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentBuilder"
      },
      "description": "Returns a new DocumentBuilder instance given a build ID.",
      "example": "compiler.fromId('abc123').build();"
    },
    "fromCache": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "cacheFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Build"
      },
      "description": "Returns build information from a compiled template.",
      "example": "compiler.fromCache('/path/to/build/abc123.js').document.render();"
    },
    "fromSource": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "DocumentBuilder"
      },
      "description": "Returns a new DocumentBuilder instance given a template source file.",
      "example": "compiler.fromSource('./docs/api.ink').build();"
    },
    "use": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "options",
          "type": "Function"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkCompiler"
      },
      "description": "Enables a default build cache strategy.",
      "example": "compiler.use(plugin)"
    },
    "asset": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "assetFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Asset"
      },
      "description": "Returns a compiled build asset, given an asset file name.",
      "example": "compiler.asset('abc123.css'); //--> { type: 'text/css', content: '...' }"
    },
    "client": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns a compiled client script, given the the template source file.",
      "example": "compiler.client('./docs/api.ink'); //client script"
    },
    "import": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Build"
      },
      "description": "Returns build information, given the the template source file.",
      "example": "compiler.import('/path/to/build/abc123.js').document.render();"
    },
    "markup": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns a compiled markup, given the the template source file.",
      "example": "compiler.markup('./docs/api.ink'); //--> <html>...</html>"
    },
    "render":  {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "props",
          "type": "Hash"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the final HTML markup, given the the template source file.",
      "example": "compiler.render('./docs/api.ink', {\n  title: 'API Documentation'\n});"
    },
    "server": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns compiled server code, given the the template source file.",
      "example": "compiler.server('./docs/api.ink'); // server script"
    },
    "styles": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns compiled css styles, given the the template source file.",
      "example": "compiler.styles('./docs/api.ink'); //css styles"
    }
  },
  "InkComponent": {
    "attr": {
      "kind": "property",
      "list": false,
      "type": "Hash",
      "description": "Returns only the valid HTML tag attributes (string and true).",
      "example": "this.attr; //--> { disabled: true, type: 'button' }"
    },
    "props": {
      "kind": "property",
      "list": false,
      "type": "Hash",
      "description": "Returns all the attributes assigned to the component.",
      "example": "this.props; //--> { disabled: true, count: 4, click: handleClick }"
    },
    "metadata": {
      "kind": "property",
      "list": false,
      "type": "[ string, string ]",
      "description": "Returns the tag and class name of the component.",
      "example": "this.metadata; //--> [ 'fancy-button', 'FancyButton_abc123' ]"
    },
    "styles": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the css styles used in the component.",
      "example": "this.styles(); //css styles"
    },
    "template": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Node[]"
      },
      "description": "Returns a function that returns an array of elements, text nodes and web components",
      "example": "this.template(); //--> () => [ Element, Text, Element, ... ]"
    },
    "render": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Renders the children and returns the final HTML markup.",
      "example": "this.render(); //--> '<p>...</p>'"
    }
  },
  "ClientRegistry": {
    "elements": {
      "kind": "property",
      "list": false,
      "type": "Map<Element, InkElement>",
      "description": "Returns a map of elements used in the DOM.",
      "example": "InkAPI.ClientRegistry.elements.get(component);"
    },
    "createComponent": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "tagname",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "component",
          "type": "InkComponent"
        },
        {
          "kind": "property",
          "list": false,
          "name": "props",
          "type": "Hash"
        },
        {
          "kind": "property",
          "list": false,
          "name": "children>",
          "type": "Node[]"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Creates a InkElement from a web component class.",
      "example": "InkAPI.ClientRegistry.createComponent('fancy-button', InkComponent, { title: 'Hello' }, children);"
    },
    "createElement": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "tagname",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "props",
          "type": "Hash"
        },
        {
          "kind": "property",
          "list": false,
          "name": "children>",
          "type": "Node[]"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Creates a InkElement from a string tag name.",
      "example": "InkAPI.ClientRegistry.createElement('a', { href: '/' }, children);"
    },
    "createText": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "text",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "TextNode"
      },
      "description": "Creates a TextNode from a raw string.",
      "example": "InkAPI.ClientRegistry.createText('foo');"
    },
    "get": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "element",
          "type": "Element"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Returns a InkElement given a DOM element.",
      "example": "InkAPI.ClientRegistry.get(element)"
    },
    "has": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "element",
          "type": "Element"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "boolean"
      },
      "description": "Returns true if the given element exists in the registry",
      "example": "InkAPI.ClientRegistry.has(element)"
    },
    "map": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "callback",
          "type": "Function"
        }
      ],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "T"
      },
      "description": "Like array map for registry returns an array of whatever the callback returns.",
      "example": "InkAPI.ClientRegistry.map((ink, element) => [ink, element]);"
    },
    "register": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "element",
          "type": "InkElement"
        },
        {
          "kind": "property",
          "list": false,
          "name": "props",
          "type": "Hash"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Registers a InkElement to the registry.",
      "example": "InkAPI.ClientRegistry.register(element, { foo: 'bar' });"
    }
  },
  "InkElement": {
    "attributes": {
      "kind": "property",
      "list": false,
      "type": "Hash",
      "description": "Returns all the attributes assigned to the element.",
      "example": "element.attributes; //--> { href: '/', title: 'Home' }"
    },
    "element": {
      "kind": "property",
      "list": false,
      "type": "Element",
      "description": "Returns the DOM element.",
      "example": "element.element; //--> <a href='/' title='Home'>"
    },
    "hasAttribute": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "name",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "boolean"
      },
      "description": "Returns true if the element has the given attribute.",
      "example": "element.hasAttribute('href');"
    },
    "getAttribute": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "name",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "unknown"
      },
      "description": "Returns the value of the given attribute.",
      "example": "element.getAttribute('href');"
    },
    "removeAttribute": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "name",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Removes the given attribute from the element.",
      "example": "element.removeAttribute('href');"
    },
    "setAttribute": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "name",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "value",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Sets the given attribute to the element.",
      "example": "element.setAttribute('href', '/');"
    },
    "setAttributes": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "attributes",
          "type": "Hash"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkElement"
      },
      "description": "Sets multiple attributes to the element.",
      "example": "element.setAttributes({ href: '/', title: 'Home' });"
    }
  },
  "InkEmitter": {
    "emit": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "event",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "target",
          "type": "T"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkEmitter"
      },
      "description": "Emits an event with optional parameters.",
      "example": "emitter.emit('click', { x: 10, y: 20 });"
    },
    "unbind": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "event",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "listener",
          "type": "Function"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkEmitter"
      },
      "description": "Removes an event listener.",
      "example": "emitter.unbind('click', handleClick);"
    },
    "on": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "event",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "listener",
          "type": "Function"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkEmitter"
      },
      "description": "Adds an event listener.",
      "example": "emitter.on('click', handleClick);"
    },
    "once": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "event",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "listener",
          "type": "Function"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "InkEmitter"
      },
      "description": "Adds an event listener that only fires once.",
      "example": "emitter.once('click', handleClick);"
    }
  },
  "InkAPI": {
    "BUILD_ID": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The unique build ID used to map the build cache.",
      "example": "InkAPI.BUILD_ID; //--> 'abc123'"
    },
    "InkComponent": {
      "kind": "property",
      "list": false,
      "type": "InkComponent",
      "description": "The Ink component class used to create custom elements.",
      "example": "new InkAPI.InkComponent();"
    },
    "InkElement": {
      "kind": "property",
      "list": false,
      "type": "InkElement",
      "description": "The Ink element class used to create custom elements.",
      "example": "new InkAPI.InkElement(\n  document.createElement('a'),\n  { href: '/' }\n); ]"
    },
    "InkEmitter": {
      "kind": "property",
      "list": false,
      "type": "InkEmitter",
      "description": "The Ink emitter class used to create custom events.",
      "example": "new InkAPI.InkEmitter();"
    },
    "InkException": {
      "kind": "property",
      "list": false,
      "type": "InkException",
      "description": "The Ink exception class used to create custom errors.",
      "example": "throw InkAPI.InkException.for('error message');"
    },
    "ClientRegistry": {
      "kind": "property",
      "list": false,
      "type": "ClientRegistry",
      "description": "The Ink registry class used to store custom elements.",
      "example": "new InkAPI.ClientRegistry.createElement('a', { href: '/' });"
    },
    "children": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "component",
          "type": "InkComponent"
        }
      ],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "Node"
      },
      "description": "Returns an array of child nodes.",
      "example": "InkAPI.children(component); //--> [ Element, Text, Element, ... ]"
    },
    "components": {
      "kind": "property",
      "list": false,
      "type": "Record<string, InkComponent>",
      "description": "Returns an object of Ink components classes used in the DOM.",
      "example": "new InkAPI.components['fancy-button']; //--> InkComponent"
    },
    "data": {
      "kind": "property",
      "list": false,
      "type": "InkDataMap",
      "description": "The Ink data map used to bring server side data to the client.",
      "example": "InkAPI.data.get('props');"
    },
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "InkEmitter",
      "description": "The Ink emitter class used to create custom events.",
      "example": "InkAPI.emitter.on('click', () => {});"
    },
    "props": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "component",
          "type": "InkComponent"
        }
      ],
      "returns": {
        "kind": "property",
        "list": true,
        "type": "Hash"
      },
      "description": "Returns an object of component attributes",
      "example": "InkAPI.props(component); //--> { foo: 'bar', count: 4 }"
    },
    "signal": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "component",
          "type": "InkComponent"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Signal"
      },
      "description": "Returns a signal object used to re-render components whenever its value changes",
      "example": "const count = InkAPI.signal(1, component)"
    }
  },
  "Render Methods": {
    "asset": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "assetFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Asset"
      },
      "description": "Returns a compiled build asset, given an asset file name.",
      "example": "await compiler.asset('abc123.css'); //--> { type: 'text/css', content: '...' }"
    },
    "client": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns a compiled client script, given the the template source file.",
      "example": "await compiler.client('./docs/api.ink'); //client script"
    },
    "markup": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns a compiled markup, given the the template source file.",
      "example": "await compiler.markup('./docs/api.ink'); //--> <html>...</html>"
    },
    "render":  {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        },
        {
          "kind": "property",
          "list": false,
          "name": "props",
          "type": "Hash"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns the final HTML markup, given the the template source file.",
      "example": "await compiler.render('./docs/api.ink', {\n  title: 'API Documentation'\n});"
    },
    "server": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns compiled server code, given the the template source file.",
      "example": "await compiler.server('./docs/api.ink'); // server script"
    },
    "styles": {
      "kind": "function",
      "async": true,
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "sourceFile",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "string"
      },
      "description": "Returns compiled css styles, given the the template source file.",
      "example": "await compiler.styles('./docs/api.ink'); //css styles"
    }
  },
  "DeveloperOptions": {
    "cwd?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The current working directory",
      "example": "const { refresh, router } = dev({ cwd: process.cwd() })"
    },
    "emitter?": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "import emitter from 'events';\n\nconst { refresh, router } = dev({ emitter });'"
    },
    "include?": {
      "kind": "property",
      "list": true,
      "type": "string",
      "description": "An array of extension names to watch for",
      "example": "const { refresh, router } = dev({ include: [ '.js', '.ts', '.ink', '.ink' ] });'"
    },
    "ignore?": {
      "kind": "property",
      "list": true,
      "type": "(string|RegExp)",
      "description": "An array of extension names to ignore",
      "example": "const { refresh, router } = dev({ ignore: [ '*.test.*' ] });'"
    },
    "route?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The route path to use for the client watcher",
      "example": "const { refresh, router } = dev({ route: '/__ink_dev__' })"
    },
    "tsconfig?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The path to the tsconfig.json file",
      "example": "const { refresh, router } = dev({ tsconfig: '/path/to/tsconfig.json' })"
    },
    "extname?": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "the component file extension",
      "example": "const { refresh, router } = dev({ extname: '.ink' })"
    }
  },
  "RefreshServer": {
    "cwd": {
      "kind": "property",
      "list": false,
      "type": "string",
      "description": "The current working directory",
      "example": "refresh.cwd"
    },
    "emitter": {
      "kind": "property",
      "list": false,
      "type": "EventEmitter",
      "description": "The NodeJS EventEmitter instance being used.",
      "example": "refresh.emitter.on('render', e => {\n  console.log(e.params);\n});"
    },
    "sync": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "name": "builder",
          "list": false,
          "type": "DocumentBuilder"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "void"
      },
      "description": "Registers a document builder to a client watcher list",
      "example": "refresh.emitter.on('render', e => {\n  console.log(e.params);\n});"
    },
    "close": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "RefreshServer"
      },
      "description": "Closes the server and stops the watchers.",
      "example": "refresh.close();"
    },
    "refresh": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "filePath",
          "type": "string"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "Promise<RefreshServer>"
      },
      "description": "Whenever a file is changed this will be called to instruct each client watcher how to update their document.",
      "example": "await refresh.refresh('/some/file.ink');"
    },
    "wait": {
      "kind": "function",
      "args": [
        {
          "kind": "property",
          "list": false,
          "name": "req",
          "type": "Request"
        },
        {
          "kind": "property",
          "list": false,
          "name": "res",
          "type": "Response"
        }
      ],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "RefreshServer"
      },
      "description": "Opens a connection to the server via SSE and waits for changes.",
      "example": "refresh.wait(req, res);"
    },
    "watch": {
      "kind": "function",
      "args": [],
      "returns": {
        "kind": "property",
        "list": false,
        "type": "RefreshServer"
      },
      "description": "Starts the server that watches for file changes.",
      "example": "refresh.watch();"
    }
  },
  "Developer Tools": {
    "refresh": {
      "kind": "property",
      "list": false,
      "type": "RefreshServer",
      "description": "The refresh server instance used to update clients.",
      "example": "const { refresh } = dev();\nrefresh.sync(builder);"
    },
    "router": {
      "kind": "property",
      "list": false,
      "type": "Function",
      "description": "HTTP middleware to handle developer tool routes like '/dev.js' and '/__ink_dev__'.",
      "example": "const { router } = dev();\napp.use(router);"
    }
  },
  "Express Developer Tools": {
    "refresh": {
      "kind": "property",
      "list": false,
      "type": "RefreshServer",
      "description": "The refresh server instance used to update clients.",
      "example": "const { refresh } = dev();\nrefresh.sync(builder);"
    },
    "router": {
      "kind": "property",
      "list": false,
      "type": "Function",
      "description": "Express middleware to handle developer tool routes like '/dev.js' and '/__ink_dev__'.",
      "example": "const { router } = dev();\napp.use(router);"
    },
    "view": {
      "kind": "property",
      "list": false,
      "type": "Function",
      "description": "Middleware used to setup an express view engine.",
      "example": "const { view } = dev();\napp.engine('ink', view(compiler));"
    }
  }
}